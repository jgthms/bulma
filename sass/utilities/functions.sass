$convertUnit-conversion-map: ( "px": 0px, "cm": 0cm, "mm": 0mm, "%": 0%, "ch": 0ch, "in": 0in, "em": 0em, "rem": 0rem, "pt": 0pt, "pc": 0pc, "ex": 0ex, "vw": 0vw, "vh": 0vh, "vmin": 0vmin, "vmax": 0vmax, "deg": 0deg, "turn": 0turn, "rad": 0rad, "grad": 0grad, "s": 0s, "ms": 0ms, "Hz": 0Hz, "kHz": 0kHz, "dppx": 0dppx, "dpcm": 0dpcm, "dpi": 0dpi)

@function powerNumber($number, $exp)
  $value: 1
  @if $exp > 0
    @for $i from 1 through $exp
      $value: $value * $number
  @else if $exp < 0
    @for $i from 1 through -$exp
      $value: $value / $number
  @return $value

@function colorLuminance($color)
  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color))
  @each $name, $value in $color-rgb
    $adjusted: 0
    $value: $value / 255
    @if $value < 0.03928
      $value: $value / 12.92
    @else
      $value: ($value + .055) / 1.055
      $value: powerNumber($value, 2)
    $color-rgb: map-merge($color-rgb, ($name: $value))
  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722)

@function findColorInvert($color)
  @if (colorLuminance($color) > 0.55)
    @return rgba(#000, 0.7)
  @else
    @return #fff

@function roundToEvenNumber($number)
  @return floor($number / 2) * 2

@function convertUnit($value, $unit)
  @if type-of($value) != 'number' or unitless($value)
    @error "Value must be number and have unit: `#{$value}`."

  // if rem is source or target unit, and px is the other unit,
  // we must use $rem-baseline to calculate.
  $source-unit: unit($value)
  @if ($source_unit == "rem" and $unit == "px")
    $value: ($value / ($value * 0 + 1) * $rem-baseline)
  @else if ($source_unit == "px" and $unit == "rem")
    $value: ($value / ($value * 0 + 1) / $rem-baseline)
  @if map-has-key($convertUnit-conversion-map, $unit)
    @return map-get($convertUnit-conversion-map, $unit) + $value
  @else
    @error "Unknown unit `#{$unit}`."
